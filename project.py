# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l6vVUW3xTD-0MLnKVbo8lGFZ2NKh1Fi-
"""

import tensorflow as tf

import os
import numpy as np
import matplotlib.pyplot as plt

drink_dir='/content/drink'
if os.path.isfile(drink_dir):
  print("檔案已經解壓縮了")
else:
  !unzip drink.zip
  print("檔案解壓縮完成")

IMAGE_SIZE = 224
BATCH_SIZE = 128

datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255, 
    validation_split=0.2)

train_generator = datagen.flow_from_directory(
    drink_dir,
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    batch_size=BATCH_SIZE, 
    subset='training')

val_generator = datagen.flow_from_directory(
    drink_dir,
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    batch_size=BATCH_SIZE, 
    subset='validation')

image_batch, label_batch = next(val_generator)
image_batch.shape, label_batch.shape

print (train_generator.class_indices)

labels = '\n'.join(sorted(train_generator.class_indices.keys()))

with open('drink_labels.txt', 'w') as f:
  f.write(labels)

!cat drink_labels.txt

IMG_SHAPE = (IMAGE_SIZE, IMAGE_SIZE, 3)

# #Create the base model from the pre-trained MobileNet V2
base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                              include_top=False, 
                                              weights='imagenet')
base_model.trainable = False

model = tf.keras.Sequential([
  base_model,
  tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.GlobalAveragePooling2D(),
  tf.keras.layers.Dense(units=7, activation='softmax')
])

model.compile(optimizer='adam', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])

model.summary()

history = model.fit(train_generator,
                    steps_per_epoch=len(train_generator), 
                    epochs=10,
                    validation_data=val_generator,
                    validation_steps=len(val_generator))

def show_train_history(history):
  plt.plot(history.history['accuracy'])
  plt.plot(history.history['val_accuracy'])
  plt.xticks([i for i in range(0,len(history.history['accuracy']))])
  plt.title('Train History')
  plt.ylabel('accuracy')
  plt.xlabel('epoch')
  plt.legend(['train','validation'],loc='upper left')
  plt.show()

  plt.plot(history.history['loss'])
  plt.plot(history.history['val_loss'])
  plt.xticks([i for i in range(0,len(history.history['loss']))])
  plt.title('Train History')
  plt.ylabel('loss')
  plt.xlabel('epoch')
  plt.legend(['train','validation'],loc='upper left')
  plt.show()

show_train_history(history)

base_model.trainable = True
fine_tune_at = 100

# Freeze all the layers before the `fine_tune_at` layer
for layer in base_model.layers[:fine_tune_at]:
  layer.trainable =  False

model.compile(optimizer=tf.keras.optimizers.Adam(1e-4),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history_fine = model.fit(train_generator,
                         steps_per_epoch=len(train_generator), 
                         epochs=5,
                         validation_data=val_generator,
                         validation_steps=len(val_generator))

show_train_history(history_fine)

model.save('model.h5')

from google.colab import files

files.download('model.h5')

#模型載入
from keras.models import load_model
model = load_model('model.h5')

drink_test_dir='/content/drinktest'
if os.path.isfile(drink_test_dir):
  print("檔案已經解壓縮了")
else:
  !unzip drinktest.zip
  print("檔案解壓縮完成")

from PIL import Image

# 讀取圖片
img = Image.open('/content/drinktest/50_Lan/108.jpg')

# 預處理圖片
img = img.resize((IMAGE_SIZE, IMAGE_SIZE))  # 調整圖片尺寸為 228*228
img_array = np.array(img)  # 將圖片轉換為 numpy array
img_array = img_array.astype('float32') / 255.0  # 將像素值標準化
img_array = img_array.reshape(1, IMAGE_SIZE, IMAGE_SIZE, 3)  # 轉換為模型所需的輸入格式

# 預測
predictions = model.predict(img_array)

# 處理預測結果
digit = np.argmax(predictions)  # 取最大值作為預測結果
probability = np.max(predictions)  # 取最大值作為機率

print('預測結果為：', digit)
print('機率為：', probability)

!cat drink_labels.txt
files.download('drink_labels.txt')